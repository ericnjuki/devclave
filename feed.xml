<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://ericnjuki.com/devclave/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ericnjuki.com/devclave/" rel="alternate" type="text/html" /><updated>2022-03-07T16:44:10+03:00</updated><id>https://ericnjuki.com/devclave/feed.xml</id><title type="html">devclave</title><subtitle>Eric Njuki dev Blog</subtitle><author><name>eric_njuki</name></author><entry><title type="html">Dockerizing ASP.NET Core Web API</title><link href="https://ericnjuki.com/devclave/2021/11/04/asp.net-core-api-sqlserver-docker-part-1.html" rel="alternate" type="text/html" title="Dockerizing ASP.NET Core Web API" /><published>2021-11-04T15:00:00+03:00</published><updated>2021-11-04T15:00:00+03:00</updated><id>https://ericnjuki.com/devclave/2021/11/04/asp.net-core-api-sqlserver-docker-part-1</id><content type="html" xml:base="https://ericnjuki.com/devclave/2021/11/04/asp.net-core-api-sqlserver-docker-part-1.html">&lt;h2&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;#setup&quot;&gt;Setup&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#the-dockerfile&quot;&gt;Creating a Dockerfile&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#building-image&quot;&gt;Building the Docker image&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#creating-container&quot;&gt;Creating the container&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;p&gt;
  &lt;span class=&quot;dropcaps&quot;&gt;S&lt;/span&gt;o I have an existing ASP.NET Core API that I want to host on Heroku.
  Since Heroku doesn't natively support .NET apps, we have to put all services of our app
  in Docker containers which are supported.
&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;
  The task is to dockerize my API together with an instance of SQL Server for my database.
  Since it's best practice to have only one app/service/thing per container,
  the API and database will have to live in separate containers and somehow talk to each other.
  &lt;br&gt;
  We will achieve this using Docker Compose which is used to connect multiple containers.
  So the tasks are:
  &lt;ol&gt;
    &lt;li&gt;Dockerize the .NET Core API&lt;/li&gt;
    &lt;li&gt;Dockerize an instance of SQL Server&lt;/li&gt;
    &lt;li&gt;Connect the two using Docker Compose&lt;/li&gt;
  &lt;/ol&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;
  This post will cover the first task:
&lt;/p&gt;

&lt;h3&gt;Part 1: Dockerizing the .NET Core API&lt;/h3&gt;
&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;
  So here's my current project. It was built on ASP.NET Core 2.2.
&lt;/p&gt;
&lt;img style=&quot;width: 50%;&quot; src=&quot;/devclave//assets/images/20211004_1_wekezapp_stn.png&quot; alt=&quot;&quot;&gt;
&lt;p&gt;
  This is a typical ASP.NET API that contains three projects.
  &lt;br&gt;
  &lt;br&gt;
  &lt;code&gt;wekezapp.core&lt;/code&gt; is the startup project and is the main project.
  It houses my controllers and exposes my API endpoints.
  &lt;br&gt;
  &lt;br&gt;
  &lt;code&gt;wekezapp.business&lt;/code&gt; is my services layer.
  It contains all the business and data processing logic.
  &lt;br&gt;
  &lt;br&gt;
  &lt;code&gt;wekezapp.data&lt;/code&gt; is my data layer.
  It contains my context class and models. Its sole task is to perform data access to the db.
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;
  I'm running Docker on Windows and set to Linux containers.
  This means that all the apps I containerize in my Docker environment will be running on Linux.
  &lt;br&gt;
  And this is purely out of preference.
  This isn't a problem for my .NET Core API because .NET Core is supported on Linux.
  &lt;br&gt;
  Note: You can use Docker Compose to connect a Linux and Windows container. (https://devblogs.microsoft.com/premier-developer/mixing-windows-and-linux-containers-with-docker-compose/)
&lt;/p&gt;

&lt;h4 id=&quot;the-dockerfile&quot;&gt;The Dockerfile&lt;/h4&gt;
&lt;p&gt;
  The first step to dockerizing an app is to create the Dockerfile.
  &lt;br&gt;
  A Dockerfile is a file named &lt;code&gt;Dockerfile&lt;/code&gt; with no file extension.
  &lt;br&gt;&lt;br&gt;
  &lt;em&gt;What's the purpose of a Dockerfile?&lt;/em&gt;
  &lt;ul&gt;
    &lt;li&gt;It lets you specify the base Docker image you'll need to containerize your application&lt;/li&gt;
    &lt;li&gt;It lets you copy all the source files you need from the host into the container&lt;/li&gt;
    &lt;li&gt;And finally it allows you to issue a command in the container's shell to stat your application&lt;/li&gt;
  &lt;/ul&gt;
  It can do a lot of other things but basically that's it.
  We're going to place the Dockerfile in the root of the application.
&lt;/p&gt;

&lt;h4&gt;Anatomy of the docker file&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h5&gt;Define a base image&lt;/h5&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; mcr.microsoft.com/dotnet/core/sdk:2.2 AS build-env&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
    &lt;p&gt;
      The base image is a Docker image that we will base our container on.
      This is an official SDK image by Microsoft that contains dev tools for .NET Core 2.2.
      It will allow us to build our application &lt;em&gt;inside&lt;/em&gt; the container.
      &lt;br&gt;
      Note that we are providing an alias for the image using the &lt;code&gt;AS&lt;/code&gt; command,
      &lt;br&gt; so now &lt;code&gt;build-env&lt;/code&gt; will refer to this image.
    &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h5&gt;Copy project files and restore packages&lt;/h5&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . ./&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;dotnet restore &lt;span class=&quot;s2&quot;&gt;&quot;./wekezapp.core/wekezapp.core.csproj&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;dotnet restore &lt;span class=&quot;s2&quot;&gt;&quot;./wekezapp.data/wekezapp.data.csproj&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;dotnet restore &lt;span class=&quot;s2&quot;&gt;&quot;./wekezapp.business/wekezapp.business.csproj&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
    &lt;p&gt;
      This tells Docker to copy all the project files into the container,
      and the &lt;code&gt;RUN&lt;/code&gt; command allows us to run commands in the container shell,
      such as &lt;code&gt;dotnet&lt;/code&gt;, which we will use to build our API.
      &lt;br&gt;
      We then restore all required NuGet packages.
    &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h5&gt;Publish the project&lt;/h5&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;dotnet publish &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; Release &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; publish&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
    &lt;p&gt;
      After restoring NuGet packages, we can go ahead and publish our project.
      This will build and publish our API in the output folder &lt;code&gt;publish&lt;/code&gt;.
    &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h5&gt;Build the runtime image&lt;/h5&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; mcr.microsoft.com/dotnet/core/aspnet:2.2.3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /app/wekezapp.core&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=build-env /app/wekezapp.core/publish .&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
    &lt;p&gt;
      Here, we're changing the base image to another official image by Microsoft,
      the ASP.NET Core 2.2.3 runtime image.
      This will provide a runtime envirionment for our API to run in. 
      So we copy all the files from the previous image into the new runtime image.
    &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h5&gt;Start the application&lt;/h5&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span class=&quot;k&quot;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;dotnet&quot;, &quot;wekezapp.core.dll&quot;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
    &lt;p&gt;
      This basically tells Docker how to start out application, 
      by running &lt;code&gt;dotnet wekezapp.core.dll&lt;/code&gt; in the container.
    &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;p&gt;
  And that's it! The full Dockerfile looks like this:
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; mcr.microsoft.com/dotnet/core/sdk:2.2 AS build-env&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /app&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Copy everything and restore nuget packages&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . ./&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;dotnet restore &lt;span class=&quot;s2&quot;&gt;&quot;./wekezapp.core/wekezapp.core.csproj&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;dotnet restore &lt;span class=&quot;s2&quot;&gt;&quot;./wekezapp.data/wekezapp.data.csproj&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;dotnet restore &lt;span class=&quot;s2&quot;&gt;&quot;./wekezapp.business/wekezapp.business.csproj&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Copy publish the project&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;dotnet publish &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; Release &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; publish

&lt;span class=&quot;c&quot;&gt;# Build runtime image&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; mcr.microsoft.com/dotnet/core/aspnet:2.2.3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /app/wekezapp.core&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=build-env /app/wekezapp.core/publish .&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;dotnet&quot;, &quot;wekezapp.core.dll&quot;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;building-image&quot;&gt;Build the Docker image&lt;/h4&gt;
&lt;p&gt;
  The next step is creating a Docker image.
  &lt;br&gt;
  A docker image is like a blueprint that's used to create the actual container.
  You create one using the &lt;code&gt;docker build&lt;/code&gt; command.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; wekezapp-image &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; Dockerfile .&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
  When we run that, this is what we get:
&lt;/p&gt;
&lt;video controls poster=&quot;/devclave//assets/images/20211004_2_docker_build_thumb.png&quot;&gt;
  &lt;source src=&quot;/devclave//assets/videos/20211004_1_docker_build_output.mp4&quot; type=&quot;video/mp4&quot; /&gt;
  &lt;source src=&quot;/devclave//assets/videos/20211004_1_docker_build_output.webm&quot; type=&quot;video/webm&quot; /&gt;
&lt;/video&gt;
&lt;p&gt;
  We can see it restoring nuget packages for our projects in the image.
  &lt;br&gt;
  Next, we use our newly-created image to create the container:
&lt;/p&gt;

&lt;h4 id=&quot;creating-container&quot;&gt;Creating the Docker container&lt;/h4&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 5000:80 &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; wekezapp-container wekezapp-image&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;
    -it flag tells docker to take you straight into the container.
    So the command line you are on will now be directly connected to the container's shell,
    in this case /bin/bash since it's a Linux container.
  &lt;/li&gt;
  &lt;li&gt;
    --rm means to delete the container once the command finishes executing. 
    This isn't bad, as docker containers are generally wanted to be stateless
  &lt;/li&gt;
  &lt;li&gt;
    -p 5000:80 tells it to map port 5000 on our local machine to port 80 on the container
  &lt;/li&gt;
  &lt;li&gt;
    &lt;code&gt;wekezapp-container&lt;/code&gt; is what we want to name the container and finally..
  &lt;/li&gt;
  &lt;li&gt;
    &lt;code&gt;wekezapp-image&lt;/code&gt; is the image we want to use to create the container.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;
  Running this command results in 
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Now listening on: http://[::]:80&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
  We can then access our app by going to &lt;code&gt;localhost:5000&lt;/code&gt;. 
  5000 is the local port we mapped to port 80 in the container in our &lt;code&gt;docker build&lt;/code&gt; command.
  &lt;br&gt;&lt;br&gt;
  And I can now try to access an API endpoint like &lt;code&gt;localhost:5000/api/users&lt;/code&gt;
  which is supposed to return a list of users from the db and I get:
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;An error occurred using the connection to database &lt;span class=&quot;s1&quot;&gt;'Wekezapp'&lt;/span&gt; on server &lt;span class=&quot;s1&quot;&gt;'.'&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
  Great! My app works.
  &lt;br&gt;
  This error makes sense because the API is the &lt;em&gt;only&lt;/em&gt; thing in the container.
  It's trying to access the db on the local machine and of course, there is none.
  &lt;br&gt;
  So in the next part, I will containerize my db.
&lt;/p&gt;

&lt;h4&gt;References&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/samples/dotnetcore/&quot;&gt;Docker official docs for ASP.NET Core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.sixeyed.com/understanding-microsofts-docker-images-for-net-apps/&quot;&gt;Understanding Microsoft's Docker Images for .NET Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>eric_njuki</name></author><category term="asp.net" /><category term="docker" /><summary type="html">Contents Background Introduction Setup Creating a Dockerfile Building the Docker image Creating the container</summary></entry><entry><title type="html">Linux Notes</title><link href="https://ericnjuki.com/devclave/2019/02/06/linux-dump-part-1.html" rel="alternate" type="text/html" title="Linux Notes" /><published>2019-02-06T18:00:00+03:00</published><updated>2019-02-06T18:00:00+03:00</updated><id>https://ericnjuki.com/devclave/2019/02/06/linux-dump-part-1</id><content type="html" xml:base="https://ericnjuki.com/devclave/2019/02/06/linux-dump-part-1.html">&lt;p&gt;&lt;span class=&quot;dropcaps&quot;&gt;T&lt;/span&gt;here was an attempt (by me) to ‘know linux’…&lt;/p&gt;

&lt;h3 id=&quot;contents&quot;&gt;Contents&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#printing&quot;&gt;Printing&lt;/a&gt;, &lt;a href=&quot;#gotchas&quot;&gt;printing gotchas&lt;/a&gt;, &lt;a href=&quot;#errors-you-might-encounter-while-printing&quot;&gt;printing errors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#remote-access&quot;&gt;Remote Access&lt;/a&gt;, &lt;a href=&quot;#ssh-errors&quot;&gt;ssh Errors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#desktop-environments&quot;&gt;Desktop Environments&lt;/a&gt;, &lt;a href=&quot;#desktop-environments-display-mangers-window-managers&quot;&gt;DE, DM, WM?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#little-things&quot;&gt;Specific things&lt;/a&gt;: &lt;a href=&quot;#disabling-user-list-at-ubuntu-login-screen&quot;&gt;disabling users list on ubuntu login screen&lt;/a&gt;, &lt;a href=&quot;#running-gedit-in-the-background-from-terminal&quot;&gt;running apps from terminal in background&lt;/a&gt;, &lt;a href=&quot;#make-ubuntu-say-things&quot;&gt;make ubuntu say stuff&lt;/a&gt;, &lt;a href=&quot;#check-linux-distro&quot;&gt;check linux distro&lt;/a&gt;, &lt;a href=&quot;#get-ip-address-and-hostname&quot;&gt;get IP and hostname&lt;/a&gt;, &lt;a href=&quot;#open-a-file-in-notepad-using-cmd&quot;&gt;open notepad++ from cli&lt;/a&gt;, &lt;a href=&quot;#copy-files-to-ftp-server-in-windows&quot;&gt;copy files to ftp server(windows)&lt;/a&gt;, &lt;a href=&quot;#VSCode code snippets&quot;&gt;VSCode Code Snippets&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#commands&quot;&gt;Commands dump&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#troubleshooting&quot;&gt;Trouble shooting&lt;/a&gt;, &lt;a href=&quot;#opensuse&quot;&gt;OpenSUSE&lt;/a&gt;, &lt;a href=&quot;#booting-to-virtual-terminal&quot;&gt;Booting to virtual terminal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- region printing --&gt;
&lt;h3 id=&quot;printing&quot;&gt;Printing&lt;/h3&gt;

&lt;p&gt;The recommended way to print in ubuntu is to use CUPS (Common Unix Printing System) as opposed to the (old) BSD printing system.
You can read more about printing systems &lt;a href=&quot;https://www.linuxjournal.com/article/6729&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First you need to install CUPS&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt install cups&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The (old) BSD system uses &lt;code class=&quot;highlighter-rouge&quot;&gt;lp&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;lpr&lt;/code&gt; commands to print. Cups has its own mappings of these same commands and it is therefore favorable to use them. You need to install them first:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt install cups-bsd&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can now print stuff&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# print file with default settings (default printer, queue etc)&lt;/span&gt;
lp file

&lt;span class=&quot;c&quot;&gt;# print to specific printer/queue&lt;/span&gt;
lp file &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &amp;lt;printer-name&amp;gt;/&amp;lt;queue&amp;gt;

&lt;span class=&quot;c&quot;&gt;# using lpr&lt;/span&gt;
lpr file

&lt;span class=&quot;c&quot;&gt;# specifics&lt;/span&gt;
lpr file &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; &amp;lt;printer-name&amp;gt;/&amp;lt;queue&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;!-- TODO: difference between lp and lpr --&gt;
&lt;h4 id=&quot;gotchas&quot;&gt;Gotchas&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lp&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;lpr&lt;/code&gt; can only print PDF, ps (PostSript) and plain text files&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It is not possible to use &lt;code class=&quot;highlighter-rouge&quot;&gt;lp&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;lpr&lt;/code&gt; to print to a printer directly using its IP&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Also, if you don’t know what your printer name is, you can find this and more printing commands at the &lt;a href=&quot;#printing-commands&quot;&gt;commands section&lt;/a&gt; of this page.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I don’t know difference between &lt;code class=&quot;highlighter-rouge&quot;&gt;lp&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;lpr&lt;/code&gt; for now…&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Here’s also some stuff I ended up installing while trying to get printing to work:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt install cups-filters libstdc++5:i386&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;errors-you-might-encounter-while-printing&quot;&gt;errors you might encounter while printing:&lt;/h4&gt;
&lt;h6 id=&quot;not-printing&quot;&gt;not printing&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# clear /var/spool/cups&lt;/span&gt;
rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /var/spool/cups/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h6 id=&quot;lp-and-lpr-not-working&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lp&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;lpr&lt;/code&gt; not working&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# install cups-bsd &quot;This package provides the BSD commands for interacting with CUPS: &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# /usr/bin/lpqa /usr/bin/lpr /usr/bin/lprm /usr/sbin/lpc&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt install cups-bsd&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;none-of-these-have-solved-my-problems&quot;&gt;none of these have solved my problems&lt;/h5&gt;
&lt;p&gt;Check CUPS logs (if you have CUPS installed) which can be found here: 
&lt;code class=&quot;highlighter-rouge&quot;&gt;found in /var/log/cups/error_log&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Look &lt;a href=&quot;https://wiki.ubuntu.com/DebuggingPrintingProblems&quot;&gt;here&lt;/a&gt; (official ubuntu page on debugging printing problems)
&lt;!-- endregion printing --&gt;&lt;/p&gt;

&lt;!-- region remote-access --&gt;
&lt;h3 id=&quot;remote-access&quot;&gt;Remote Access&lt;/h3&gt;

&lt;h4 id=&quot;using-ssh-passwordless-ssh-login&quot;&gt;using ssh (passwordless ssh login)&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# solution 1: one-liner&lt;/span&gt;
sshpass &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'password'&lt;/span&gt; ssh user@host&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# solution 2: safer&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 1 create ~/.ssh on target PC if it does not exist&lt;/span&gt;
ssh user@host mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; .ssh &lt;span class=&quot;c&quot;&gt;# enter password&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 2 exit and generate private/public key pair on your pc&lt;/span&gt;
ssh-keygen &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; rsa

&lt;span class=&quot;c&quot;&gt;# 3 copy your generated public key to the authorized_keys file in .ssh folder of host&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; .ssh/public_key.pub | ssh user@host &lt;span class=&quot;s1&quot;&gt;'cat &amp;gt;&amp;gt; .ssh/authorized_keys'&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 4 set permissions on host .ssh folder and authorized_keys file&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# this is important, otherwise ssh will always require a password&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# from SO: &quot;~, ~/.ssh and ~/.ssh/authorized_keys must be writable only by you (700 - 755)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# &quot;your ~/.ssh/authorized_keys must be readable (at least 400) but writeable (600)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# if you'll need to add more keys to it&lt;/span&gt;
ssh user@host &lt;span class=&quot;s2&quot;&gt;&quot;chmod 700 .ssh; chmod 640 .ssh/authorized_keys&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 2.5 OR, after generating the key in step 2, just do this which will do step 3 and 4 for you&lt;/span&gt;
ssh-copy-id user@host &lt;span class=&quot;c&quot;&gt;# enter password&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 2.5 OR if your server uses custom port no:&lt;/span&gt;
ssh-copy-id &lt;span class=&quot;s2&quot;&gt;&quot;user@host -p 1234&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;..aand you’re done, you can now login to the remote without having to input password with:
ssh user@host&lt;/p&gt;

&lt;h4 id=&quot;ssh-errors&quot;&gt;ssh errors&lt;/h4&gt;
&lt;p&gt;-Attempting to ssh into windows:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Unable to negotiate with &amp;lt;IP&amp;gt; port 22: no matching cipher found. Their offer: aes128-cbc,3des-cbc,aes192-cbc,aes256-cbc&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;-FIX:
check which ciphers your client supports:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh -Q cipher&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;if any of the ciphers are also supported by the server (Their offer: …), then you can force the use of those specific ciphers:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh -c aes256-cbc usr@host&lt;/code&gt;
&lt;!-- endregion remote-access --&gt;&lt;/p&gt;

&lt;!-- region desktop-environments --&gt;
&lt;h3 id=&quot;desktop-environments&quot;&gt;Desktop environments&lt;/h3&gt;
&lt;p&gt;Stumbled on these when trying to figure out how to speed up a slow machine.
Here’s my general assessment of popular linux DEs based on a quick read:&lt;/p&gt;
&lt;h5 id=&quot;kde&quot;&gt;KDE&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Robust and highly customizable&lt;/li&gt;
  &lt;li&gt;Heavy and clunky&lt;/li&gt;
  &lt;li&gt;OpenSUSE, Kubuntu&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;gnome-3&quot;&gt;Gnome (3)&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Modern, Graphically heavy&lt;/li&gt;
  &lt;li&gt;Mother of Cinammon, Unity&lt;/li&gt;
  &lt;li&gt;Debian, Fedora, Ubuntu Gnome&lt;/li&gt;
  &lt;li&gt;Gnome 2, though deprecated is much more lightweight&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;mate&quot;&gt;MATE&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Based on Gnome 2&lt;/li&gt;
  &lt;li&gt;Built to be lightweight&lt;/li&gt;
  &lt;li&gt;Kind on memory&lt;/li&gt;
  &lt;li&gt;Highly customizable&lt;/li&gt;
  &lt;li&gt;Ubuntu MATE&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;the-rest&quot;&gt;The rest&lt;/h5&gt;
&lt;p&gt;Cinammon (linux Mint), LXDE (Lubuntu, lightweight), Xfce (Xubuntu, Manjaro, lightweight), Pantheon (Elementary OS, beautiful)&lt;/p&gt;

&lt;h5 id=&quot;lightdmgdm&quot;&gt;lightdm/gdm&lt;/h5&gt;
&lt;p&gt;-LightDM is an x display manager that aims to be lightweight, fast, extensible and multi-desktop
-gdm (the GNOME Display Manager) is a display manager (a graphical login program) for the windowing systems X11 and Wayland.It is a highly configurable reimplementation of xdm, the X Display Manager&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Can be changed by:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;dpkg-reconfigure gdm &lt;span class=&quot;c&quot;&gt;# (if gdm is already installed)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;desktop-environments-display-mangers-window-managers&quot;&gt;Desktop Environments, Display Mangers, Window Managers?&lt;/h4&gt;
&lt;p&gt;from &lt;a href=&quot;https://unix.stackexchange.com/questions/20385/windows-managers-vs-login-managers-vs-display-managers-vs-desktop-environment?rq=1&quot;&gt;StackOverflow&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Xorg, XFree86 and X11 are display servers. This creates the graphical environment.
[gkx]dm (and others) are display managers. A login manager is a synonym. This is the first X program run by the system if the system (not the user) is starting X and allows you to log on to the local system, or network systems.&lt;/li&gt;
  &lt;li&gt;A window manager controls the placement and decoration of windows. That is, the window border and controls are the decoration. Some of these are stand alone (WindowMaker, sawfish, fvwm, etc). Some depend on an accompanying desktop environment.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A desktop environment such as XFCE, KDE, GNOME, etc. are suites of applications designed to integrate well with each other to provide a consistent experience.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;In theory (and mostly so in practice) any of those components are interchangeable. You can run kmail using GNOME with WindowMaker on Xorg.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- endregion desktop-environments --&gt;

&lt;!-- region little-things --&gt;
&lt;h3 id=&quot;little-things&quot;&gt;Little things&lt;/h3&gt;
&lt;h5 id=&quot;disabling-user-list-at-ubuntu-login-screen&quot;&gt;Disabling user list at ubuntu login screen&lt;/h5&gt;
&lt;p&gt;&lt;em&gt;one liner:&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s@# \[org\/gnome\/login-screen\]@[org/gnome/login-screen]@'&lt;/span&gt; /etc/gdm3/greeter.dconf-defaults &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s@# disable-user-list=true@disable-user-list=true@'&lt;/span&gt; /etc/gdm3/greeter.dconf-defaults&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; init 6&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;manually:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;edit &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/gdm3/greeter.dconf-defaults&lt;/code&gt; and uncomment the following lines:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;disable-user-list&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;org/gnome/login-screen]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then restart&lt;/p&gt;

&lt;h5 id=&quot;running-gedit-in-the-background-from-terminal&quot;&gt;Running gedit in the background from terminal&lt;/h5&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gedit &amp;amp;&lt;/code&gt;&lt;br /&gt;
OR&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;setsid gedit # runs a program in a new session&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;make-ubuntu-say-things&quot;&gt;Make Ubuntu say things&lt;/h5&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install gnustep-gui-runtime&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;say &quot;You can't handle the truth&quot;&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;check-linux-distro&quot;&gt;Check linux distro&lt;/h5&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python -mplatform | grep -iw KEYWORD # KEYWORD could be 'ubuntu' or 'opensuse' etc&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;get-ip-address-and-hostname&quot;&gt;Get IP address and hostname&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;  hostname &lt;span class=&quot;c&quot;&gt;# prints hostname&lt;/span&gt;

  hostname &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints IP address&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# if the above (for IP) doesn't work e.g. in OpenSUSE, try this:&lt;/span&gt;
  ifconfig &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-iw&lt;/span&gt; inet | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'127.0.0.1'&lt;/span&gt; | awk &lt;span class=&quot;s1&quot;&gt;'{ print $2}'&lt;/span&gt; | cut &lt;span class=&quot;nt&quot;&gt;-f2-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;:

  &lt;span class=&quot;c&quot;&gt;# let's deconstruct that...&lt;/span&gt;

  ifconfig &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# gives a whole bunch of info related to currently connected network devices&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# '|' pipes (sends) the output of ifconfig -a to the next command:&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-iw&lt;/span&gt; inet 
  &lt;span class=&quot;c&quot;&gt;# returns every line that has 'inet' in it. &lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# -i = case-insensitive match (openSUSE gives its result in all caps, ubuntu does not)&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# -w = exact word match (otherwise grep matches things like inet6 or inetBLA which lie outside our interest)&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# the resulting lines get piped to:&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'127.0.0.1'&lt;/span&gt; 
  &lt;span class=&quot;c&quot;&gt;# grep -v is a reverse match i.e &quot;return all lines that DO NOT have this&quot;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# '127.0.0.1' is... I forgot what's special about it, but we don't want it (TODO)&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# i forgot what the awk does also... (TODO)&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# ok so after the awk command, the result looks something like this:&lt;/span&gt;

  addr: X.X.X.X

  &lt;span class=&quot;c&quot;&gt;# so we want to remove the 'addr: ' part which is why we pipe that result to cut:&lt;/span&gt;
  cut &lt;span class=&quot;nt&quot;&gt;-f2-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;:
  &lt;span class=&quot;c&quot;&gt;# read about the cut in the commands section below, but this cut splits its input into 2 fields&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# using a colon ':' as the delimiter and returns the second field (the part after the colon, which is the actual IP):&lt;/span&gt;
  X.X.X.X&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;open-a-file-in-notepad-using-cmd&quot;&gt;Open a file in notepad++ using cmd&lt;/h5&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;start notepad++ &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;copy-files-to-ftp-server-in-windows&quot;&gt;Copy files to ftp server in windows&lt;/h5&gt;
&lt;p&gt;-you can map a network location to a local drive in windows by going to THIS PC &amp;gt; Map network drive
-this would allow you to upload files to an ftp server if you map one. (why? because browsers have limited ftp support and can only download but not upload; other than browsers you’d need a 3rd party ftp client to upload to an ftp server)&lt;/p&gt;

&lt;h5 id=&quot;vscode-code-snippets&quot;&gt;VSCode code snippets:&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;For_Loop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prefix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;for&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;for (const ${2:element} of ${1:array}) {&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;$0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;For Loop&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;KEY:&lt;/p&gt;

&lt;p&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;${1-based_index_of_traversal:initial_default}&lt;/code&gt; - placeholders (tab stops)&lt;/p&gt;

&lt;p&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;$0&lt;/code&gt; - final tab stop&lt;/p&gt;

&lt;p&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;\t&lt;/code&gt; - insert tab&lt;/p&gt;

&lt;p&gt;-each element of “body” is a line&lt;/p&gt;

&lt;p&gt;-You can also use this &lt;a href=&quot;https://snippet-generator.app&quot;&gt;snippet generator app&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;line-breaks-in-markdown&quot;&gt;line breaks in markdown&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/shaunlebron/746476e6e7a4d698b373&quot;&gt;From here&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;  Hello  (&amp;lt;-- two spaces)
  World

  Hello&lt;span class=&quot;nt&quot;&gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
  World

  Hello

  World

  hello&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
  world
  # (works only if it is the last character. If it has trailing spaces(e.g. &quot;hello&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;&quot;), backslash will be output)

  Hello&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;
  World

  # all output the following:
  Hello
  World&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Hello&lt;/p&gt;

&lt;p&gt;World&lt;/p&gt;

&lt;!-- endregion little-things --&gt;

&lt;!-- region specific-cmds --&gt;
&lt;h2 id=&quot;commands&quot;&gt;Commands&lt;/h2&gt;
&lt;h3 id=&quot;packages-commands&quot;&gt;Packages Commands&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# remove packages (and uneeded dependencies):&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get remove &lt;span class=&quot;nt&quot;&gt;--auto-remove&lt;/span&gt; package-name

&lt;span class=&quot;c&quot;&gt;# list all packages manually (intentionally) installed:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;zcat &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-tr&lt;/span&gt; /var/log/apt/history.log&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.gz&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /var/log/apt/history.log&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 2&amp;gt;/dev/null |
  egrep &lt;span class=&quot;s1&quot;&gt;'^(Start-Date:|Commandline:)'&lt;/span&gt; |
  &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; aptdaemon |
  egrep &lt;span class=&quot;s1&quot;&gt;'^Commandline:'&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# search package&lt;/span&gt;
apt-cache search keyword
&lt;span class=&quot;c&quot;&gt;# or&lt;/span&gt;
apt search keyword
&lt;span class=&quot;c&quot;&gt;# (TODO: difference?)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;printing-commands&quot;&gt;Printing Commands&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# print&lt;/span&gt;
lp file &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &amp;lt;printer-alias&amp;gt;/&amp;lt;queue&amp;gt;]

&lt;span class=&quot;c&quot;&gt;# or&lt;/span&gt;
lpr file &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; &amp;lt;printer-alias&amp;gt;/&amp;lt;queue&amp;gt;]

&lt;span class=&quot;c&quot;&gt;# hasn't worked for me...&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;you_file.prn | netcat &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; 1 printer_ip 9100

&lt;span class=&quot;c&quot;&gt;# checking info about printers&lt;/span&gt;
lpq &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; printer_alias&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# check printing queue&lt;/span&gt;

lprm &lt;span class=&quot;c&quot;&gt;# remove jobs from queue (that haven't been processed)&lt;/span&gt;

lpstat &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# will list all the available printers.&lt;/span&gt;

lpinfo &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# find out if your printer is detected by cups&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;file-management&quot;&gt;File management&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /path/to/go/to &lt;span class=&quot;c&quot;&gt;# change directory to path&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# list files+folders in a directory&lt;/span&gt;

cp from/here to/here &lt;span class=&quot;c&quot;&gt;# copy&lt;/span&gt;

mv from/here to/here &lt;span class=&quot;c&quot;&gt;# move/rename file&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# to move multiple files, you can use wildcards:&lt;/span&gt;
mv &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;IDENTIFIER&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; destination 
&lt;span class=&quot;c&quot;&gt;# will move myIDENTIFIER, IDENTIFIERofmine &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# i.e. zero or more characters, followed by IDENTIFIER, &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# followed by zero or more characters to destination&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# OR you can use -t flag to set destination:&lt;/span&gt;
mv &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; DESTINATION file1 file2 file3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;cat&quot;&gt;cat&lt;/h3&gt;
&lt;p&gt;short for conCATenate&lt;/p&gt;

&lt;p&gt;can:
-display file contents:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;file

&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; file &lt;span class=&quot;c&quot;&gt;#print line numbers&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; file &lt;span class=&quot;c&quot;&gt;#omit repeated empty lines&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-T&lt;/span&gt; file &lt;span class=&quot;c&quot;&gt;#display 'tab' character as ^I (to distinguish them from space)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; file &lt;span class=&quot;c&quot;&gt;#display end of line as $&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;-copy file contents (you can use cp for this though)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;file &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; file2 &lt;span class=&quot;c&quot;&gt;#if file2 exists it will be overwritten with file's contents&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;-concatenate (of course)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;file file2 &lt;span class=&quot;c&quot;&gt;#concats contents of both files and prints result on console&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;-create files&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; fileX
&lt;span class=&quot;c&quot;&gt;# will create a new fileX, and give you the opportunity to write the contents of fileX. Once you are done, CTRL+D will save the file&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;–you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt; in place of &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; to append to a file rather than overwrite it&lt;br /&gt;
– &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt; can also be used to create files&lt;/p&gt;

&lt;h3 id=&quot;ssh&quot;&gt;ssh&lt;/h3&gt;
&lt;p&gt;-List files in remote without logging in:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh user@host ls path/to/directory&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;-Copy files to and from remote using ssh:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;scp file remoteuser@remoteserver:path &lt;span class=&quot;c&quot;&gt;# from local to remote&lt;/span&gt;

scp remoteuser@remoteserver:path/to/file destination &lt;span class=&quot;c&quot;&gt;# from remote to local&lt;/span&gt;

scp &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; remoteuser@remoteserver:path &lt;span class=&quot;c&quot;&gt;# copy all (can copy directories)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;-Create/Edit files in remote (using vim)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;vi scp://user@host:22//home/user/Documents/file1&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# there are two slashes after the port number, 22 (which you can exclude btw) because the second one&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# stands for root directory&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;!-- endregion specific-cmds --&gt;

&lt;!-- region troubleshooting --&gt;
&lt;h3 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h3&gt;
&lt;h4 id=&quot;opensuse&quot;&gt;OpenSUSE&lt;/h4&gt;
&lt;h5 id=&quot;booting-to-virtual-terminal&quot;&gt;Booting to virtual terminal&lt;/h5&gt;
&lt;p&gt;Possible issues:&lt;/p&gt;

&lt;h6 id=&quot;1-default-target-is-not-graphical&quot;&gt;1. Default target is not graphical:&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;  systemctl get-default &lt;span class=&quot;c&quot;&gt;# something other than graphical.target&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# FIX:&lt;/span&gt;
  systemctl set-default graphical.target&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;if default is &lt;code class=&quot;highlighter-rouge&quot;&gt;graphical.target&lt;/code&gt; then maybe the virtual terminal was activated by accident. Force revert to gui by doing:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;  CTRL+ALT+F7 &lt;span class=&quot;c&quot;&gt;# if doesn't work do CTRL+ALT+(F1-F12)&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# if that still doesn't work force booting to gui:&lt;/span&gt;
  init 5&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h6 id=&quot;2-insufficient-space-on-disk&quot;&gt;2. Insufficient space on disk&lt;/h6&gt;

&lt;p&gt;Try running &lt;code class=&quot;highlighter-rouge&quot;&gt;startx&lt;/code&gt; from the virtual terminal (after logging in to root)
if you get an error saying “No space left on device” or “not enough space?”, it’s possible there’s a drive taking up too much space.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;df&lt;/code&gt; and scan for anything close to “100%” on the &lt;code class=&quot;highlighter-rouge&quot;&gt;use&lt;/code&gt; column. For me everything in &lt;code class=&quot;highlighter-rouge&quot;&gt;dev/sda7&lt;/code&gt; was full. This happended to be where &lt;code class=&quot;highlighter-rouge&quot;&gt;/var&lt;/code&gt; was mounted.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;From &lt;a href=&quot;https://superuser.com/questions/1127028/startx-doesnt-work-not-enough-space&quot;&gt;StackOverflow&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;-Run &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo du -smx * .[^.]* | sort -n&lt;/code&gt;
-The &lt;code class=&quot;highlighter-rouge&quot;&gt;-s (--summarize)&lt;/code&gt; option prints the total size for each file/directory.
-The &lt;code class=&quot;highlighter-rouge&quot;&gt;-m&lt;/code&gt; option prints the disk space used by each file/directory in Megabytes.&lt;/p&gt;

&lt;p&gt;-The &lt;code class=&quot;highlighter-rouge&quot;&gt;-x (--one-file-system)&lt;/code&gt; option forces du to remain on the initial filesystem. This leaves out irrelevant (to this end!) info like all files in /run, /sys, /dev and/or /proc.&lt;/p&gt;

&lt;p&gt;-The &lt;code class=&quot;highlighter-rouge&quot;&gt;[^.].*&lt;/code&gt; includes hidden files while excluding the parent directory, ..).&lt;/p&gt;

&lt;p&gt;-Finally, sorting the list numerically conveniently displays the directories taking up the most amount of space at the end of the list.&lt;/p&gt;

&lt;p&gt;-You then change into the directory taking up the most space and repeat the process for its subdirectories. Eventually you should find the culprit.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;For me though, &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/tmp&lt;/code&gt; was taking up 28 out of the allocated 30 GB for its partition.
A simple &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo rm -rf /var/tmp;init 6&lt;/code&gt; fixed my issue
&lt;!-- endregion troubleshooting --&gt;&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://unix.stackexchange.com/questions/131496/what-is-lightdm-and-gdm&quot;&gt;SO&lt;/a&gt; (LightDM vs GDM)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://unix.stackexchange.com/questions/20385/windows-managers-vs-login-managers-vs-display-managers-vs-desktop-environment?rq=1&quot;&gt;SO&lt;/a&gt; (Desktop Environment vs Display Managers vs Window Manager)&lt;/p&gt;

&lt;p&gt;…to be continued&lt;/p&gt;</content><author><name>eric_njuki</name></author><category term="linux" /><summary type="html">There was an attempt (by me) to ‘know linux’…</summary></entry><entry><title type="html">Custom Model Binding ASP.NET Core 2.1</title><link href="https://ericnjuki.com/devclave/2018/10/21/dotnet-core-model-binding.html" rel="alternate" type="text/html" title="Custom Model Binding ASP.NET Core 2.1" /><published>2018-10-21T07:30:00+03:00</published><updated>2018-10-21T07:30:00+03:00</updated><id>https://ericnjuki.com/devclave/2018/10/21/dotnet-core-model-binding</id><content type="html" xml:base="https://ericnjuki.com/devclave/2018/10/21/dotnet-core-model-binding.html">&lt;p&gt;
  &lt;span class=&quot;dropcaps&quot;&gt;I&lt;/span&gt; was recently assigned a task by the throne: From a .NET backend, intercept incoming data from the client, filter
  out all the strings and perform various functions (Normalize names of people and places, trim whitespaces etc.)
  on the data before persisting it to a database.
  It was a fairly narrow domain, given I only had to deal with a single model class and just one action method.
  So I started preparing for my quest.
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;
  I put together my gear: Visual Studio, Google Chrome and Postman,
  mounted my horse and headed West, on a quest to fulfill the King's wishes.
  My first stop was Redmond, the land of &lt;a href=&quot;#&quot;&gt;Microsoft Official Docs&lt;/a&gt; 
  (which, by the way, I strongly suggest you read before proceeding).
  An informant there gave me a couple of helpful pointers which led to the following discoveries:
&lt;/p&gt;
&lt;br&gt;
&lt;ol&gt;
  &lt;li&gt;
    The client has many avenues of sending data to your backend:
    &lt;ul&gt;
        &lt;li&gt;Form data&lt;/li&gt;
        &lt;li&gt;Http Request body&lt;/li&gt;
        &lt;li&gt;URI (route values and query parameters)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;br&gt;
  &lt;li&gt;
    &lt;p&gt;
      Whenever a Request hits the backend, before the values are available for use
      in the action method, model binding has to occur. Now the default model binder does an excellent job at this but
      sometimes you may need functionality not provided by default.
      &lt;br&gt; 
      &lt;br&gt; 
      Which is why the Redmondonian druids graciously provided any willing tinkerer the ability to forge their own
      model binders and bind their data to the models themselves!
    &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;p&gt;
  I gave the informant 2 gold coins for this valuable information and set out to plan the next phase of my quest.
  So now we have the required tools, a recipe and the blessings of our ancestors. Next, we need a plan!
&lt;/p&gt;

&lt;h2 id=&quot;innerlink-the-plan&quot;&gt;The Plan&lt;/h2&gt;
&lt;h3&gt;Part A: Understanding the Problem&lt;/h3&gt;
&lt;p&gt;The client will send me an object that looks like this:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;HERMES&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;secondName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Dandelion  &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// with trailing spaces&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;phoneNumber&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0722222222&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
    ..which I will receive in this action method:
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;na&quot;&gt;[Route(&quot;api/Person&quot;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;p&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PostPerson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;somePerson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// var result = personService.Add(somePerson);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Person looks like this..&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FirstName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecondName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PhoneNumber&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
    It is important to note that the default model binder will work just fine in this case. 
    But for this post, we want a custom model binder to:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;proper case the names&lt;/li&gt;
  &lt;li&gt;remove the trailing space in the second name&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;Now that we understand the solution, let's brew up a solution...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;#innerlink-the-plan&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;Part B: Coming up with a solution&lt;/h3&gt;
&lt;p&gt;Now, according to my informant at Redmond, in order to surmount this task I had to do two things:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;
        Create my custom model binder
    &lt;/li&gt;
    &lt;li&gt;
        Inform the framework of the existence of my custom model binder
    &lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Creating our model binder&lt;/h4&gt;
&lt;p&gt;
    To create custom model binders, we implement interface &lt;code&gt;IModelBinder&lt;/code&gt; which exposes a single method &lt;code&gt;BindModelAsync()&lt;/code&gt;.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonBinder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IModelBinder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BindModelAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelBindingContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// don't worry we'll implement this shortly&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
    Once we do that, we'll have to inform the framework on when to use our model binder
&lt;/p&gt;

&lt;h4&gt;Informing the framework&lt;/h4&gt;
&lt;p&gt;There are at least two ways to tell the framework where to look for our custom binders:&lt;/p&gt;
&lt;h5&gt;1. Using decorators: &lt;/h5&gt;
&lt;ul&gt;
    &lt;li&gt;
        Decorating a property
        &lt;p&gt;
            ...with a ModelBinderAttribute specifying the type of our custom model binder.
            Using our example we can have the binder be called to bind just the first name:

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ModelBinder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PersonModelBinder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FirstName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecondName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PhoneNumber&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

        &lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        Decorating an Action's parameter:
        &lt;p&gt;...with the same attribute&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PostPerson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ModelBinder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PersonModelBinder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

    &lt;/li&gt;
    &lt;li&gt;
        Decorating the whole Class or Struct

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;na&quot;&gt;[ModelBinder(typeof(PersonModelBinder))]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FirstName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecondName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PhoneNumber&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

    &lt;p&gt;
        In this case the model binder is used for each occurrence of the target type. 
        Unluckily, we can’t follow this path for system types (like string), as we can’t apply any attribute to it.
    &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;2. Adding our binder to the pipeline&lt;/h5&gt;
&lt;p&gt;
  The pipeline is...
  There's a good read about the pipeline &lt;a href=&quot;https://www.infoq.com/articles/aspnetcore-power-of-simplicity&quot;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
  With this approach we can set some rules that determine when our binder gets called.
  We'll be going the pipeline way.
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;
  When I asked my informant how to insert my custom binder into the pipeline he dismissed my proposal
  saying &quot;one does not simply add one's binder to the pipeline&quot; gesticulating it in a way that I suppose
  he thought I should understand. I did not.
  &lt;br&gt;
  &lt;br&gt;
  He proceded to tell me that in order to ensure my binder gets
  called, I need to create a provider for it. A provider is basically a method that returns an instance of my binder.
  And this provider is what gets plugged into the pipeline.
  A provider is created by implementing &lt;code&gt;IModelBinderProvider&lt;/code&gt; that exposes a single method 
  &lt;code&gt;GetBinder()&lt;/code&gt; in which I should create a new instance of my binder class somehow.
  &lt;br&gt;
  This is also how the built-in framework binders are implemented. 
&lt;/p&gt;

&lt;h4&gt;
    Implementing IModelBinderProvider
&lt;/h4&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonModelBinderProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IModelBinderProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IModelBinder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetBinder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelBinderProviderContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// will return our binder&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;
    To add it to the pipeline. Open &lt;code&gt;Startup.cs&lt;/code&gt; and inside the &lt;code&gt;ConfigureServices()&lt;/code&gt; method add this:
&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddMvc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// add custom binder to beginning of collection&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelBinderProviders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PersonModelBinderProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
  As you can see, we're inserting our binder provider in the beginning of this collection. Why?
  When evaluating model binders, the collection of providers is examined in order. 
  The first provider that returns a binder is used. We don't know if another provider (such as the default one) 
  is capable of providing a binder for our model (it is) and if so, what position it occupies in this collection, 
  so armed with audacity we boldly insert it at the very beginning.
  &lt;br&gt;
  Now that we have a workable solution, let's implement it!
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;#innerlink-the-plan&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
    Part C: Implementing the solution
&lt;/h5&gt;
&lt;p&gt;
    We're going to add one more file. This file contains a definition for a custom attribute which we 
    will need in our solution. 
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;StrFormatAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cs&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ProperCase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;RemoveExtraSpaces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[AttributeUsage(AttributeTargets.All)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StrFormatAttributeAttribute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StrFormatAttributeAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CallerMemberName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;Implementing the provider&lt;/h4&gt;
&lt;p&gt;
  Now we shall implement our provider first. Enter &lt;code&gt;PersonModelBinderProvider.cs&lt;/code&gt;
  The method there &lt;code&gt;GetBinder()&lt;/code&gt; is supposed to return anything that inherits from &lt;code&gt;IModelBinder&lt;/code&gt;.
  Our custom model binder fits this description, so lets simply return an instance of it and see what happens:
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IModelBinder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetBinder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelBinderProviderContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PersonModelBinder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
  In order to test how this works out, our binder has to be implemented as well.
  Since we haven't done that yet, we'll take a shortcut:
  go over to &lt;code&gt;PersonModelBinder.cs&lt;/code&gt; and return &lt;code&gt;Task.CompletedTask&lt;/code&gt; in &lt;code&gt;BindModelAsync()&lt;/code&gt;:
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BindModelAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelBindingContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompletedTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;
  Set a breaking point on GetBinder() and run the application. 
  Go over to postman and create this request:

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-http&quot; data-lang=&quot;http&quot;&gt;&lt;span class=&quot;nf&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;/api/Person/p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;localhost:49506&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application/x-www-form-urlencoded&lt;/span&gt;

secondName=Dandelion    &amp;amp;firstName=HERMES&amp;amp;phoneNumber=0722222222&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
  (note the four spaces after the word Dandelion)
&lt;img src=&quot;/devclave//assets/images/20181021_1_aspcore_model_binding_postman_screenshot_1.png&quot; alt=&quot;postman request&quot;&gt;
&lt;/p&gt;    

&lt;br&gt;
&lt;h6&gt;observations&lt;/h6&gt;
&lt;p&gt;
    Our provider gets called once. 
    Why?
    Remember this collection:
    &lt;code&gt;options.&lt;b&gt;ModelBinderProviders&lt;/b&gt;.Insert(0, new PersonModelBinderProvider());&lt;/code&gt;?
    Whenever a model needs to be bound, the framework goes through this collection of binder providers looking
    for one to provide a binder to that model. If one does provide a binder, it gets called and the framework
    stops looking [for another provider for that given model].
    &lt;br&gt;
    Great! Now we know a little bit more about these things, let's experiment some more!
    What happens when we don't provide a binder in our provider?
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IModelBinder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetBinder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelBinderProviderContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h6&gt;observations&lt;/h6&gt;
&lt;p&gt;
  We will notice that the provider gets called 4 times.
  Why? This is because our controller action method essentially expects four models to be bound:
  &lt;ul&gt;
    &lt;li&gt;The complex property of type Person&lt;/li&gt;
    &lt;li&gt;The FirstName property in Person&lt;/li&gt;
    &lt;li&gt;The SecondName property in Person&lt;/li&gt;
    &lt;li&gt;The PhonNumber property in Person&lt;/li&gt;
  &lt;/ul&gt;
  &lt;br&gt;
  Yup, blew my mind too. So if you have another class say &lt;code&gt;Alien&lt;/code&gt; which looks like this:
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Alien&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Race&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LimbsCount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
  and expect it in our controller..
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PostPerson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;somePerson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Alien&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alienX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
  Our provider gets called 7 times!
  So what happens after all these calls?
  Since we're returning null in each of these calls, it means that our provider won't provide a binder and the
  framework moves on to the next provider in the collection. (Eventually it will find the default provider which ought
  to provide a default binder for our models).
  &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;#innerlink-the-plan&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;br&gt;
  Ok, this seems like the best place to place a few misplaced notes:
  &lt;br&gt;
  As a rule, once a provider provides a binder, its job is done and it doesn't get called again.
  We have, however, demonstrated two exceptions to that rule: 
  &lt;ul&gt;
    &lt;li&gt;When the framework 'traverses' a complex property; The binder will be called for each of the 
        sub-properties of the complex one, whether or not a binder is provided for any of them.
    &lt;/li&gt;
    &lt;li&gt;
        If the action method expects more than one parameter. Even if a binder is provided for the first parameter, complex property or not,
        the provider is still called for the remaining parameters of the action.
    &lt;/li&gt;
  &lt;/ul&gt;
  &lt;br&gt;
  Ok enough experiments. Back to our problem.
  In our case, we're looking to bind specific properties and not whole classes. So here's how we go about it.
  Going to &lt;code&gt;Person.cs&lt;/code&gt;, let's make a few changes:
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DataMember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;StrFormatAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProperCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FirstName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DataMember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;secondName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;StrFormatAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RemoveExtraSpaces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecondName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DataMember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PhoneNumber&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PhoneNumber&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
  We've added two attributes to &lt;code&gt;FirstName&lt;/code&gt; and &lt;code&gt;SecondName&lt;/code&gt; one to &lt;code&gt;PhoneNumber&lt;/code&gt;
  &lt;br&gt;
  The &lt;code&gt;DataMember&lt;/code&gt; attribute is for data serialization to help the framework associate data from the client with
  our model class. It's always a good idea to include serialization attributes to you Data Transfer Objects.
  &lt;br&gt;
  The other one is the custom attribute we created earlier that will help us determine which operations to
  perform on which models.
  &lt;br&gt;
  Also by now I hope you've figured out that the term 'model' does not necessarily refer to a class. 
  It can be used to refer to a property as well.
  Depending on where you learned .NET from this can be quite the ambiguous term.
  &lt;br&gt;
  &lt;br&gt;
  Ok let's implement our provider, for real now:
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IModelBinder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetBinder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelBinderProviderContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentNullException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsComplexType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyInfosOfParent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContainerType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propHasCustomAttribute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyInfosOfParent&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetCustomAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StrFormatAttributeAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PropertyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;propHasCustomAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PersonModelBinder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h6&gt;Phrase by phrase:&lt;/h6&gt;

&lt;p&gt;
  We don't know where this context comes from and whether it will always be available, so we check it for null:
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentNullException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
  Earlier we noticed that our provider gets called for the complex type &lt;code&gt;Person&lt;/code&gt;. We are not interested in the
  whole &lt;code&gt;Person&lt;/code&gt;, just its properties that are marked with our custom attribute.
  So we return null on this call, and hence our provider will get called three more times, one for each property of
  &lt;code&gt;Person&lt;/code&gt;.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsComplexType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
  At this point we are fairly certain that the &lt;code&gt;Metadata&lt;/code&gt; describes some property in &lt;code&gt;Person&lt;/code&gt;. So we get 
  its parent container (&lt;code&gt;Person&lt;/code&gt;) and extracting its properties. I know I know, Inception right?
  Actually it's &lt;code&gt;Reflection&lt;/code&gt;.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyInfosOfParent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContainerType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
  Then, we use &lt;code&gt;Reflection&lt;/code&gt; again to check if the property currently being examined has our custom attribute:
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propHasCustomAttribute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyInfosOfParent&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetCustomAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StrFormatAttributeAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PropertyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
  If it does, we return a binder for it:
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;propHasCustomAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PersonModelBinder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt; Else, and for all other unimaginable cases, we just return null:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
  Phew! At this point we've made sure that our binder gets called for only the properties we want to manually bind.
  Let's now go ahead and bind them.
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;#innerlink-the-plan&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;Side note&lt;/h5&gt;
&lt;p&gt;
  Ok so in case you aren't caught up, our provider was providing a binder for multiple properties of &lt;code&gt;Person&lt;/code&gt;.
  This means that our binder gets called for each of these properties. (in our case, it's twice, for &lt;code&gt;FirstName&lt;/code&gt; and &lt;code&gt;SecondName&lt;/code&gt;).
  So if we stop execution anywhere in this method and examine injected &lt;code&gt;ModelBindingContext&lt;/code&gt;, we will see
  that it contains information about the current Property.
  &lt;br&gt;
  &lt;br&gt;
  This context also contains a value provider that grants us access to the values that the client sent us. 
  This means all values that the framework could get from the request (from the body, forms, request params etc)
  All you have to do is get them using their keys.
  Now this is where things get a little bit...tricky. 
&lt;/p&gt;

&lt;h4&gt;Implementing the binder&lt;/h4&gt;
&lt;p&gt;Now let's head over to &lt;code&gt;PersonModelBinder.cs&lt;/code&gt;, and see how we implement &lt;code&gt;BindModelAsync()&lt;/code&gt;: &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BindModelAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelBindingContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentNullException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; 
              
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueProviderResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValueProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valueProviderResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueProviderResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompletedTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueProviderResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FirstValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyInfosOfParent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelMetadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContainerType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetCustomAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StrFormatAttributeAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentProperty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyInfosOfParent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FirstOrDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customAttribute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StrFormatAttributeAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetCustomAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StrFormatAttributeAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FirstOrDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RemoveExtraSpaces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;\s+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToProper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;CultureInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cultureInfo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurrentThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurrentCulture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;TextInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textInfo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cultureInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToTitleCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToLower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelBindingResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompletedTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
  See there is a lot of logic that goes into determining which piece of data should be mapped to which model
  whenever data hits the server. By hijacking this process we are putting ourselves up for this task of sifting
  through the data available and trying to determine what goes where. This is hard to
  pull off because it needs to be perfect and it needs to scale.
  &lt;br&gt;
  That's why we should try and bind as few models as we can ourselves
  &lt;br&gt;
  That's why we went to all the trouble of creating custom attributes and marking exactly which properties 
  we absolutely needed to bind ourselves and left the rest for the framework to take care of.
  &lt;br&gt;
  &lt;br&gt;
  Since we are the ones who built the client app (which we are simulating using Postman), we can easily get the
  keys associated with the data sent by the client. We included these keys in &lt;code&gt;Data Serialization&lt;/code&gt; attributes
  to further guide the framework on what to put where.
  We also gave our properties identical names to the fields sent from the client. This allows us to use the (framework-populated) key
  &lt;code&gt;bindingContext.ModleName&lt;/code&gt; to retrieve our data from the value provider.
  So our plan is to get this value, check what operation we need to perform on it (using our custom attribute), perform it, and return the
  modified model.
&lt;/p&gt;
&lt;br&gt;
&lt;h6&gt;Phrase by phrase:&lt;/h6&gt;
&lt;p&gt;
  The first line is a customary null check.
  We then proceed to get the current value from the value provider and null-check it as well.
  If there is no value to bind we return &lt;code&gt;Task.CompletedTask&lt;/code&gt;. Now since we hijacked the model binding
  process, the framework has no way of knowing when we finish our binding, or what determines a successful
  binding. This is why it provides the &lt;code&gt;bindingContext.Result&lt;/code&gt; property. 
  &lt;br&gt;
  &lt;br&gt;
  If we return &lt;code&gt;Task.CompletedTask&lt;/code&gt; without setting this property, the framework assumes binding failed.
  If binding succeeded, we will set it to &lt;code&gt;ModelBindingResult.Success(model)&lt;/code&gt; where &lt;code&gt;model&lt;/code&gt; is
  our bound model.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentNullException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueProviderResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValueProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valueProviderResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueProviderResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompletedTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueProviderResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FirstValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
  For some reason the property currently being examined itself is not contained in the metadata.
  We have to get it using reflection as we are here:
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyInfosOfParent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelMetadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContainerType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentProperty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyInfosOfParent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FirstOrDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
  Then we retrieve our custom attribute &lt;code&gt;StrFormatAttribute&lt;/code&gt; since it contains really important
  information (what operation to be performed on the model)
  &lt;br&gt;
  Once we do that, we determine what operation needs to be done, and do it:
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customAttribute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StrFormatAttributeAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetCustomAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StrFormatAttributeAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FirstOrDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RemoveExtraSpaces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;\s+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToProper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CultureInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cultureInfo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurrentThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurrentCulture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TextInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textInfo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cultureInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToTitleCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToLower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
  Then you have to inform the framework whether or not your custom binding succeeded.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;  &lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelBindingResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompletedTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
  Now as you noticed in &lt;code&gt;Person&lt;/code&gt;, &lt;code&gt;PhoneNumber&lt;/code&gt; isn't adorned with our custom &lt;code&gt;StrFormatAttribute&lt;/code&gt;. And since we're
  skipping over everything that doesn't wear this badge of honour, what happens to it?
  &lt;br&gt;
  See here, the framework graciously takes care of that for us, no problem.
  &lt;br&gt;
  &lt;img src=&quot;/devclave//assets/images/20181021_1_aspcore_model_binding_bound_object_1.png&quot; alt=&quot;framework binds the unbound&quot;&gt;
  &lt;br&gt;
  Yup, if you don't commit to binding a model, the framework will do it for you, unless:
  &lt;ul&gt;
    &lt;li&gt;You provide a binder for a complex property i.e. If you provide a binder
      for &lt;code&gt;Person&lt;/code&gt; the framework expects you to bind and returned a full &lt;code&gt;Person&lt;/code&gt;. If you only
      bind &lt;code&gt;FirstName&lt;/code&gt; and leave the rest unset, they will be null.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;#innerlink-the-plan&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;And Finally..&lt;/h4&gt;
&lt;p&gt;
  after 3 days and 3 nights, having battled and triumphed over the vicious beasts in these lands called bugs.
  Having consulted tomes written by many master druids that came before me, tomes like StackOverflow
  and DotNetCurry. Having forged and reforged custom model binders in an effort to perfect the craft,
  at last, I had completed my quest.
  &lt;br&gt;
  &lt;br&gt;
  I mounted my horse and rode home as fast as I could. I was happy that, finally, the King would recognize my
  efforts, acknowledge the importance of my work to the prosperity of the kingdom and even
  consider me when the Knighting ceremony comes along.
  &lt;br&gt;
  &lt;br&gt;
  This was not to be.
  The king had completely forgotten that he had assigned me this task!
  I was reprimanded for wasting the kingdom's resources and was sent off to clean the stables for a week!
  *sigh*
  &lt;br&gt;
  Kings, and pawns.
&lt;/p&gt;
&lt;h5&gt;The end&lt;/h5&gt;
&lt;br&gt;
These are some notes I found while researching. They sounded important, so I put them here:
&lt;pre style=&quot;word-wrap: break-word; white-space: pre-wrap;&quot;&gt;
  * Custom model binders:
      -Shouldn't attempt to set status codes or return results (for example, 404 Not Found). If model binding fails, an action filter or logic within the action method itself should handle the failure.
      -Typically shouldn't be used to convert a string into a custom type, a TypeConverter is usually a better option.
  
  
  * In previous versions of mvc, When binding a model:
      -The framework would iterate through the collection of ModelBinderProviders until one of them returned a non-null IModelBinder instance.
      -The matched binder would have access to the request and the value providers, which basically extracted and formatted data from the request.
      -By default, a DefaultModelBinder class was used along with value providers that extracted data from the query string, form data, route values and even from the parsed JSON body.
  
  * In Core:
      -Not every binding source is checked by default. 
      Some model binders require you to specifically enable a binding source. 
      For example, when binding from the Body, you need to add [FromBody] to your model/action parameter, otherwise the BodyModelBinder won’t be used. 
      Same for binding from Header or from files
      -There are value providers for route values, query string values and form values. 
      Binders based on value providers can get data from any of these, but won’t be able to get data from other sources like the body for example. 
      Although form data is posted in the body as a URL-encoded string, it is a special case parsed and interpreted as a value provider by the framework.
&lt;/pre&gt;
&lt;p&gt;Happy Custom Model Binding!&lt;/p&gt;
&lt;h4&gt;References&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/mvc/advanced/custom-model-binding?view=aspnetcore-2.1&quot;&gt;Microsoft Docs&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.dotnet-programming.com/post/2017/02/22/Custom-Model-Binding-in-Aspnet-Core-2-Getting-Time-2b-Client-Time-Zone-Offset.aspx&quot;&gt;Explains binding process well&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.dotnetcurry.com/aspnet-mvc/1368/aspnet-core-mvc-custom-model-binding&quot;&gt;DotNetCurry&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://weblog.west-wind.com/posts/2017/Sep/14/Accepting-Raw-Request-Body-Content-in-ASPNET-Core-API-Controllers&quot;&gt;Explains Requests and data well&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://tahirnaushad.com/2017/09/15/custom-model-binding-in-asp-net-core-2-0/&quot;&gt;Great Example&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2186969/custom-model-binder-for-a-property&quot;&gt;First saw the binder provider implemented in this question&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;#innerlink-the-plan&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name>eric_njuki</name></author><category term="first-post" /><category term="fooling-around" /><summary type="html">I was recently assigned a task by the throne: From a .NET backend, intercept incoming data from the client, filter out all the strings and perform various functions (Normalize names of people and places, trim whitespaces etc.) on the data before persisting it to a database. It was a fairly narrow domain, given I only had to deal with a single model class and just one action method. So I started preparing for my quest. I put together my gear: Visual Studio, Google Chrome and Postman, mounted my horse and headed West, on a quest to fulfill the King's wishes. My first stop was Redmond, the land of Microsoft Official Docs (which, by the way, I strongly suggest you read before proceeding). An informant there gave me a couple of helpful pointers which led to the following discoveries: The client has many avenues of sending data to your backend: Form data Http Request body URI (route values and query parameters) Whenever a Request hits the backend, before the values are available for use in the action method, model binding has to occur. Now the default model binder does an excellent job at this but sometimes you may need functionality not provided by default. Which is why the Redmondonian druids graciously provided any willing tinkerer the ability to forge their own model binders and bind their data to the models themselves! I gave the informant 2 gold coins for this valuable information and set out to plan the next phase of my quest. So now we have the required tools, a recipe and the blessings of our ancestors. Next, we need a plan!</summary></entry><entry><title type="html">New Look!</title><link href="https://ericnjuki.com/devclave/2018/06/12/new-look.html" rel="alternate" type="text/html" title="New Look!" /><published>2018-06-12T19:49:25+03:00</published><updated>2018-06-12T19:49:25+03:00</updated><id>https://ericnjuki.com/devclave/2018/06/12/new-look</id><content type="html" xml:base="https://ericnjuki.com/devclave/2018/06/12/new-look.html">&lt;p&gt;&lt;span class=&quot;dropcaps&quot;&gt;A&lt;/span&gt;fter weeks of toiling and moiling night after night, I finally coded up a simple theme for this site. It’s far from complete, but it’ll suffice for the next couple of years, possibly decades. Now, finally, there’s nothing standing between me and publishing a few posts every week, except procrastination and inclination - foes I have triumphed over in the past, nothing to worry about. Well, till next post, fare thee well.&lt;/p&gt;</content><author><name>eric_njuki</name></author><category term="fooling-around" /><summary type="html">After weeks of toiling and moiling night after night, I finally coded up a simple theme for this site. It’s far from complete, but it’ll suffice for the next couple of years, possibly decades. Now, finally, there’s nothing standing between me and publishing a few posts every week, except procrastination and inclination - foes I have triumphed over in the past, nothing to worry about. Well, till next post, fare thee well.</summary></entry><entry><title type="html">Some CSS Tricks</title><link href="https://ericnjuki.com/devclave/2018/05/20/css-tricks-1.html" rel="alternate" type="text/html" title="Some CSS Tricks" /><published>2018-05-20T17:32:13+03:00</published><updated>2018-05-20T17:32:13+03:00</updated><id>https://ericnjuki.com/devclave/2018/05/20/css-tricks-1</id><content type="html" xml:base="https://ericnjuki.com/devclave/2018/05/20/css-tricks-1.html">&lt;h5 id=&quot;some-css-tricks-ive-learned&quot;&gt;Some css tricks I’ve learned:&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#containing-an-image-within-a-div&quot;&gt;Containing an image within a div&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#centering-an-image&quot;&gt;Centering an image&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#div-expand-to-floated-content&quot;&gt;Div expand to floated content&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#target-all-except-first-child&quot;&gt;Target all except first child&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;article-spacing&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;containing-an-image-within-a-div&quot;&gt;Containing an image within a div:&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.div-containing-img&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.div-containing-img&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* set width */&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;centering-an-image&quot;&gt;Centering an image:&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.image-to-center&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;div-expand-to-floated-content&quot;&gt;Div expand to floated content:&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.div-to-expand&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline-block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;c&quot;&gt;/* if you need to vertically align text as well,
   you only need to set line-height */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;target-all-except-first-child&quot;&gt;Target all except first child:&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;grandmother&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;mother&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:not&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:first-child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;#some-css-tricks-ive-learned&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name>eric_njuki</name></author><category term="css" /><category term="tricks" /><summary type="html">Some css tricks I’ve learned: Containing an image within a div Centering an image Div expand to floated content Target all except first child</summary></entry><entry><title type="html">CSS Variables</title><link href="https://ericnjuki.com/devclave/2018/03/30/css-variables.html" rel="alternate" type="text/html" title="CSS Variables" /><published>2018-03-30T06:34:00+03:00</published><updated>2018-03-30T06:34:00+03:00</updated><id>https://ericnjuki.com/devclave/2018/03/30/css-variables</id><content type="html" xml:base="https://ericnjuki.com/devclave/2018/03/30/css-variables.html">&lt;h2 id=&quot;contents&quot;&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#what-are-they-css-variables&quot;&gt;Skip intro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#more-notes-about-css-variables&quot;&gt;Notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#nifty-examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;dropcaps&quot;&gt;T&lt;/span&gt;o mark the beginning of a new month, I decided to equip myself with new skills on my journey towards becoming an exceptional designer. Naïvely, I decided to conquer CSS. All of it. One. Property. Atatime. Turns out one does not simply learn all of CSS, but one can try. And so begins the journey towards CSS Mastery. First up: CSS Variables…&lt;/p&gt;

&lt;h3 id=&quot;what-are-they-css-variables&quot;&gt;What are they? (CSS variables)&lt;/h3&gt;

&lt;p&gt;CSS Variables are actually a combination of two CSS features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#custom-properties&quot;&gt;Custom Properties&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#var-function&quot;&gt;var() function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’re from the Object-Oriented Programming world, think of &lt;code class=&quot;highlighter-rouge&quot;&gt;Custom properties&lt;/code&gt; as &lt;em&gt;setters&lt;/em&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;var()&lt;/code&gt; function as a &lt;em&gt;getter&lt;/em&gt;. If you’re not from that world then… read on.&lt;/p&gt;

&lt;h4 id=&quot;custom-properties&quot;&gt;Custom Properties&lt;/h4&gt;

&lt;p&gt;Custom properties are just like normal CSS properties, but prefixed with two dashes and can accept &lt;em&gt;any&lt;/em&gt; value you want.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Syntax&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;--property-name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/* examples */&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/* value can be any valid css property value */&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--main-line-height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;2px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--main-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--default-transition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;2s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ease-in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/* or a javascript statement */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;#contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;var-function&quot;&gt;var() Function&lt;/h4&gt;
&lt;p&gt;Used to access the value of a custom property. The &lt;code class=&quot;highlighter-rouge&quot;&gt;var()&lt;/code&gt; function, as defined by CSS, can only be used to access values set by a &lt;code class=&quot;highlighter-rouge&quot;&gt;custom property&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Syntax&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--custom-property&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;fallback&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]?);&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/* examples */&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--main-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;font-style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--default-font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Helvetica&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Arial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* 'Helvetica, Arial' 
becomes the fallback value */&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/* can also be used to set the value of another custom property */&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--header-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--main-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* fall back to blue if --main-color
 is not defined */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;#contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;fallbacks&quot;&gt;Fallbacks&lt;/h4&gt;
&lt;p&gt;Fallbacks are only er.. fallen back to when the custom property in question is not defined. Otherwise, naturally, &lt;code class=&quot;highlighter-rouge&quot;&gt;css variables&lt;/code&gt; are ignored by browsers that don’t support them.&lt;/p&gt;

&lt;p&gt;Include a fallback property right before the the one containing a &lt;code class=&quot;highlighter-rouge&quot;&gt;css variable&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--main-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* ignored by non-supporting browsers so the color 
remains red */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;How is this useful? I don’t know. But a guess is that you could use not-widely-supported css along with &lt;code class=&quot;highlighter-rouge&quot;&gt;css variables&lt;/code&gt; and add fallbacks:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;--main-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* fall back for browsers that don't support variables _and_ rgba() */&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--main-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;#contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;more-notes-about-css-variables&quot;&gt;More notes about CSS Variables&lt;/h4&gt;

&lt;h5 id=&quot;less-magic-strings--less-errors&quot;&gt;Less magic strings == Less errors&lt;/h5&gt;
&lt;p&gt;By convention, define all your global variables in the &lt;code class=&quot;highlighter-rouge&quot;&gt;:root&lt;/code&gt; selector&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nd&quot;&gt;:root&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;--default-transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.3s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;--borders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;:root&lt;/code&gt; selector in HTML/CSS is like &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt; but with a higher specificity.&lt;/p&gt;

&lt;h5 id=&quot;theming&quot;&gt;Theming&lt;/h5&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;css variables&lt;/code&gt; make theming a cinch. There are many ways to go about it, but the most straightforward is defining multiple rules for different themes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.blue-theme&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;--primary-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.red-theme&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;--primary-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;…and switching between them using a toggle.&lt;/p&gt;

&lt;h5 id=&quot;custom-properties-cascade&quot;&gt;custom properties cascade&lt;/h5&gt;

&lt;p&gt;Which basically means that the value of a custom property set lower in the stylesheet is the one that gets applied:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nd&quot;&gt;:root&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;--preferred-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.some-element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;--preferred-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--preferred-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/* background will be blue */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;and-are-inherited-too&quot;&gt;…and are inherited too&lt;/h5&gt;
&lt;p&gt;Which means if we a custom property’s value on a div say &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div class&quot;some-class&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.some-class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;--preferred-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then &lt;code class=&quot;highlighter-rouge&quot;&gt;--preferred-color&lt;/code&gt; will be set to red in all the descendants of &lt;code class=&quot;highlighter-rouge&quot;&gt;some-class&lt;/code&gt; i.e//
&lt;code class=&quot;highlighter-rouge&quot;&gt;some-class *&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;#contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;nifty-example&quot;&gt;Nifty example&lt;/h4&gt;
&lt;p&gt;When creating multiple rules each just slightly different from the rest:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.one&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.two&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.three&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;green&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.four&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;…you can instead do:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--div-border-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--div-border-style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--div-border-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.one&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--div-border-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.three&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--div-border-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.four&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--div-border-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;#contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Fin&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name>eric_njuki</name></author><category term="css" /><summary type="html">Contents Skip intro Notes Examples</summary></entry><entry><title type="html">First Post</title><link href="https://ericnjuki.com/devclave/2018/03/17/the-first-tale.html" rel="alternate" type="text/html" title="First Post" /><published>2018-03-17T05:13:00+03:00</published><updated>2018-03-17T05:13:00+03:00</updated><id>https://ericnjuki.com/devclave/2018/03/17/the-first-tale</id><content type="html" xml:base="https://ericnjuki.com/devclave/2018/03/17/the-first-tale.html">&lt;p&gt;&lt;span class=&quot;dropcaps&quot;&gt;S&lt;/span&gt;ome time back I decided I was going to start blogging.&lt;/p&gt;

&lt;p&gt;I hadn’t a specific topic in mind or any particular audience I wanted to reach out to.
I was simply intrigued by the fact that a single person could move many others with nothing but some time, thought and a little work in the way of crafting words.
&lt;br /&gt;
&lt;br /&gt;
Imbued with a sense of adventure, I decided to embark upon this journey.
As with all things we resolve to do, the devil makes it his business to impede any significant progress we hope to accomplish. His go-to weapon? Procrastination.
&lt;br /&gt;
&lt;br /&gt;
This was three years ago and now, I’m sitting in front of my laptop, intensely motivated by the countless articles I’ve consumed in the past few days, still confused, but hey, I’ve come this far, who knows when I’ll get here again? So I begin to type…&lt;/p&gt;</content><author><name>eric_njuki</name></author><category term="first-post" /><category term="fooling-around" /><summary type="html">Some time back I decided I was going to start blogging.</summary></entry></feed>